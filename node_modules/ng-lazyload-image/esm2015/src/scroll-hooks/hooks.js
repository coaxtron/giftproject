import { empty, Observable, of } from 'rxjs';
import { sampleTime, share, startWith } from 'rxjs/operators';
import { SharedHooks } from '../shared-hooks/hooks';
import { Rect } from './rect';
export class ScrollHooks extends SharedHooks {
    constructor() {
        super(...arguments);
        this.getWindow = () => window;
        this.scrollListeners = new WeakMap();
        // Only create one scroll listener per target and share the observable.
        // Typical, there will only be one observable per application
        this.getScrollListener = (scrollTarget) => {
            if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
                console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
                return empty();
            }
            const scrollListener = this.scrollListeners.get(scrollTarget);
            if (scrollListener) {
                return scrollListener;
            }
            const srollEvent = Observable.create((observer) => {
                const eventName = 'scroll';
                const handler = (event) => observer.next(event);
                const options = { passive: true, capture: false };
                scrollTarget.addEventListener(eventName, handler, options);
                return () => scrollTarget.removeEventListener(eventName, handler, options);
            });
            const listener = this.sampleObservable(srollEvent);
            this.scrollListeners.set(scrollTarget, listener);
            return listener;
        };
    }
    getObservable(attributes) {
        if (this.skipLazyLoading()) {
            return of('load');
        }
        else if (attributes.customObservable) {
            return attributes.customObservable.pipe(startWith(''));
        }
        else if (attributes.scrollContainer) {
            return this.getScrollListener(attributes.scrollContainer);
        }
        return this.getScrollListener(this.getWindow());
    }
    isVisible(event, attributes) {
        const elementBounds = Rect.fromElement(attributes.element);
        if (elementBounds === Rect.empty) {
            return false;
        }
        const windowBounds = Rect.fromWindow(this.getWindow());
        elementBounds.inflate(attributes.offset);
        if (attributes.scrollContainer) {
            const scrollContainerBounds = Rect.fromElement(attributes.scrollContainer);
            const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);
            return elementBounds.intersectsWith(intersection);
        }
        else {
            return elementBounds.intersectsWith(windowBounds);
        }
    }
    sampleObservable(obs, scheduler) {
        return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2Nyb2xsLWhvb2tzL2hvb2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBVyxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLE9BQU8sV0FBWSxTQUFRLFdBQTJCO0lBQTVEOztRQUNZLGNBQVMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDbEIsb0JBQWUsR0FBRyxJQUFJLE9BQU8sRUFBd0IsQ0FBQztRQWtDdkUsdUVBQXVFO1FBQ3ZFLDZEQUE2RDtRQUM3RCxzQkFBaUIsR0FBRyxDQUFDLFlBQW1DLEVBQTBCLEVBQUU7WUFDbEYsSUFBSSxDQUFDLFlBQVksSUFBSSxPQUFPLFlBQVksQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7Z0JBQ3hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsWUFBWSxHQUFHLHlEQUF5RCxDQUFDLENBQUM7Z0JBQ2xILE9BQU8sS0FBSyxFQUFFLENBQUM7YUFDaEI7WUFDRCxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM5RCxJQUFJLGNBQWMsRUFBRTtnQkFDbEIsT0FBTyxjQUFjLENBQUM7YUFDdkI7WUFFRCxNQUFNLFVBQVUsR0FBc0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQXdCLEVBQUUsRUFBRTtnQkFDbkYsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDO2dCQUMzQixNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkQsTUFBTSxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDbEQsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQzNELE9BQU8sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDN0UsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsQ0FBQztJQUNKLENBQUM7SUF4REMsYUFBYSxDQUFDLFVBQXNDO1FBQ2xELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ25CO2FBQU0sSUFBSSxVQUFVLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEMsT0FBTyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3hEO2FBQU0sSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMzRDtRQUNELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxTQUFTLENBQUMsS0FBcUIsRUFBRSxVQUFzQjtRQUNyRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzRCxJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2hDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELGFBQWEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpDLElBQUksVUFBVSxDQUFDLGVBQWUsRUFBRTtZQUM5QixNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQzNFLE1BQU0sWUFBWSxHQUFHLHFCQUFxQixDQUFDLG1CQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzdFLE9BQU8sYUFBYSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNuRDthQUFNO1lBQ0wsT0FBTyxhQUFhLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQztJQUVELGdCQUFnQixDQUFJLEdBQWtCLEVBQUUsU0FBZTtRQUNyRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBMEJGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZW1wdHksIE9ic2VydmFibGUsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzYW1wbGVUaW1lLCBzaGFyZSwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU2hhcmVkSG9va3MgfSBmcm9tICcuLi9zaGFyZWQtaG9va3MvaG9va3MnO1xuaW1wb3J0IHsgQXR0cmlidXRlcyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuL3JlY3QnO1xuXG5leHBvcnQgY2xhc3MgU2Nyb2xsSG9va3MgZXh0ZW5kcyBTaGFyZWRIb29rczxFdmVudCB8IHN0cmluZz4ge1xuICBwcm90ZWN0ZWQgZ2V0V2luZG93ID0gKCkgPT4gd2luZG93O1xuICBwcml2YXRlIHJlYWRvbmx5IHNjcm9sbExpc3RlbmVycyA9IG5ldyBXZWFrTWFwPGFueSwgT2JzZXJ2YWJsZTxhbnk+PigpO1xuXG4gIGdldE9ic2VydmFibGUoYXR0cmlidXRlczogQXR0cmlidXRlczxFdmVudCB8IHN0cmluZz4pOiBPYnNlcnZhYmxlPEV2ZW50IHwgc3RyaW5nPiB7XG4gICAgaWYgKHRoaXMuc2tpcExhenlMb2FkaW5nKCkpIHtcbiAgICAgIHJldHVybiBvZignbG9hZCcpO1xuICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlKSB7XG4gICAgICByZXR1cm4gYXR0cmlidXRlcy5jdXN0b21PYnNlcnZhYmxlLnBpcGUoc3RhcnRXaXRoKCcnKSk7XG4gICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVzLnNjcm9sbENvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsTGlzdGVuZXIoYXR0cmlidXRlcy5zY3JvbGxDb250YWluZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxMaXN0ZW5lcih0aGlzLmdldFdpbmRvdygpKTtcbiAgfVxuXG4gIGlzVmlzaWJsZShldmVudDogRXZlbnQgfCBzdHJpbmcsIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbGVtZW50Qm91bmRzID0gUmVjdC5mcm9tRWxlbWVudChhdHRyaWJ1dGVzLmVsZW1lbnQpO1xuICAgIGlmIChlbGVtZW50Qm91bmRzID09PSBSZWN0LmVtcHR5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHdpbmRvd0JvdW5kcyA9IFJlY3QuZnJvbVdpbmRvdyh0aGlzLmdldFdpbmRvdygpKTtcbiAgICBlbGVtZW50Qm91bmRzLmluZmxhdGUoYXR0cmlidXRlcy5vZmZzZXQpO1xuXG4gICAgaWYgKGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgICBjb25zdCBzY3JvbGxDb250YWluZXJCb3VuZHMgPSBSZWN0LmZyb21FbGVtZW50KGF0dHJpYnV0ZXMuc2Nyb2xsQ29udGFpbmVyKTtcbiAgICAgIGNvbnN0IGludGVyc2VjdGlvbiA9IHNjcm9sbENvbnRhaW5lckJvdW5kcy5nZXRJbnRlcnNlY3Rpb25XaXRoKHdpbmRvd0JvdW5kcyk7XG4gICAgICByZXR1cm4gZWxlbWVudEJvdW5kcy5pbnRlcnNlY3RzV2l0aChpbnRlcnNlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudEJvdW5kcy5pbnRlcnNlY3RzV2l0aCh3aW5kb3dCb3VuZHMpO1xuICAgIH1cbiAgfVxuXG4gIHNhbXBsZU9ic2VydmFibGU8VD4ob2JzOiBPYnNlcnZhYmxlPFQ+LCBzY2hlZHVsZXI/OiBhbnkpOiBPYnNlcnZhYmxlPFQgfCAnJz4ge1xuICAgIHJldHVybiBvYnMucGlwZShzYW1wbGVUaW1lKDEwMCwgc2NoZWR1bGVyKSwgc2hhcmUoKSwgc3RhcnRXaXRoKCcnKSk7XG4gIH1cblxuICAvLyBPbmx5IGNyZWF0ZSBvbmUgc2Nyb2xsIGxpc3RlbmVyIHBlciB0YXJnZXQgYW5kIHNoYXJlIHRoZSBvYnNlcnZhYmxlLlxuICAvLyBUeXBpY2FsLCB0aGVyZSB3aWxsIG9ubHkgYmUgb25lIG9ic2VydmFibGUgcGVyIGFwcGxpY2F0aW9uXG4gIGdldFNjcm9sbExpc3RlbmVyID0gKHNjcm9sbFRhcmdldD86IEhUTUxFbGVtZW50IHwgV2luZG93KTogT2JzZXJ2YWJsZTxFdmVudCB8ICcnPiA9PiB7XG4gICAgaWYgKCFzY3JvbGxUYXJnZXQgfHwgdHlwZW9mIHNjcm9sbFRhcmdldC5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2BhZGRFdmVudExpc3RlbmVyYCBvbiAnICsgc2Nyb2xsVGFyZ2V0ICsgJyAoc2Nyb2xsVGFyZ2V0KSBpcyBub3QgYSBmdW5jdGlvbi4gU2tpcHBpbmcgdGhpcyB0YXJnZXQnKTtcbiAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgIH1cbiAgICBjb25zdCBzY3JvbGxMaXN0ZW5lciA9IHRoaXMuc2Nyb2xsTGlzdGVuZXJzLmdldChzY3JvbGxUYXJnZXQpO1xuICAgIGlmIChzY3JvbGxMaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHNjcm9sbExpc3RlbmVyO1xuICAgIH1cblxuICAgIGNvbnN0IHNyb2xsRXZlbnQ6IE9ic2VydmFibGU8RXZlbnQ+ID0gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBTdWJqZWN0PEV2ZW50PikgPT4ge1xuICAgICAgY29uc3QgZXZlbnROYW1lID0gJ3Njcm9sbCc7XG4gICAgICBjb25zdCBoYW5kbGVyID0gKGV2ZW50OiBFdmVudCkgPT4gb2JzZXJ2ZXIubmV4dChldmVudCk7XG4gICAgICBjb25zdCBvcHRpb25zID0geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9O1xuICAgICAgc2Nyb2xsVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiAoKSA9PiBzY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLnNhbXBsZU9ic2VydmFibGUoc3JvbGxFdmVudCk7XG4gICAgdGhpcy5zY3JvbGxMaXN0ZW5lcnMuc2V0KHNjcm9sbFRhcmdldCwgbGlzdGVuZXIpO1xuICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgfTtcbn1cbiJdfQ==